name: push
on:
  workflow_dispatch:
  push:
    branches:
       - master
       - main
    # paths-ignore:
    #    - 'frontend/**'
    #    - 'docs/**'

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] #windows-latest,
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version:  ${{ matrix.python-version }}
      - id: pip-cache
        run: python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"
      # - name: Install gettext
      #   run: sudo apt-get install git
      - name: Install requirements
        run: pip install tox
      - uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Run pre-commit
        run: |
              export PYVER={{ matrix.python-version }}
              tox -e py"  ${PYVER//.}"
  #     - name: Run tests
  #       run: |
  #           sed -i 1d .envrc
  #           source .envrc
  #           pytest
  #     - name: Install gettext
  #       run: sudo apt-get install gettext
  #     - name: Create traslate files
  #       run: ./manage.py makemessages -l es
  #     - name: "Upload translate files to transifex"
  #       with:
  #           TX_TOKEN: ${{ secrets.TX_TOKEN }}
  #           git_flow: false
  #           github_token: ${{ secrets.GITHUB_TOKEN }}
  #           pull_translations: false
  #           pull_sources: false
  #           push_translations: false
  #           push_sources: true
  #       uses: docker://sergioisidoro/github-transifex-action:v0.2.0
  #
  # build:
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   env:
  #     CI: true
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     - name: Check out tests repository
  #       uses: actions/checkout@v2
  #       with:
  #         repository: open-contracting/spoonbill-test
  #         token: ${{ secrets.CHECKOUT_PAT }}
  #         path: 'test'
  #     - name: Install requirements
  #       run: pip install -r test/requirements.txt
  #     - uses: nanasess/setup-chromedriver@v1.0.5
  #     - name: create env file
  #       run: |
  #             echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
  #             echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
  #             echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
  #             echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
  #             echo "CORS_ORIGIN_WHITELIST=http://127.0.0.1:8000,http://127.0.0.1" >> .env
  #             echo "CELERY_BACKEND=db+postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres/${{ secrets.POSTGRES_DB }}" >> .env
  #             echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
  #             echo "SENTRY_ENVIRONMENT=tests" >> .env
  #     - name: "Download translate files from transifex for front"
  #       run: |
  #             pip install transifex-client
  #             cd ./frontend
  #             export TX_TOKEN=${{ secrets.TX_TOKEN }}
  #             tx pull -l es
  #     - name: "Download translate files from transifex"
  #       uses: docker://sergioisidoro/github-transifex-action:v0.2.0
  #       with:
  #           TX_TOKEN: ${{ secrets.TX_TOKEN }}
  #           git_flow: false
  #           github_token: ${{ secrets.GITHUB_TOKEN }}
  #           pull_translations: true
  #           pull_sources: false
  #           push_translations: false
  #           push_sources: false
  #     - name: Run tests docker-compose
  #       run: |
  #             docker-compose -f docker-compose.test.yaml build
  #             docker-compose -f docker-compose.test.yaml pull
  #             docker-compose -f docker-compose.test.yaml up -d
  #             sleep 10
  #             docker-compose -f docker-compose.test.yaml logs app
  #             docker ps
  #             cd ./test
  #             DOMAIN_URL=http://127.0.0.1:8000 SITE_URL=http://127.0.0.1 POSTGRES_DB=${{ secrets.POSTGRES_DB }} POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} python -m robot -s queue tests/integration
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: Tests result
  #         path: |
  #           test/output.xml
  #           test/log.html
  #           test/report.html
  #     - name: Build container image
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ secrets.R_USER }}
  #         password: ${{ secrets.R_SECRET }}
  #         registry: docker.pkg.github.com
  #         repository: ${{ github.repository }}/${{ secrets.IMAGE_NAME }}
  #         tag_with_sha: true
  #         tag_with_ref: true
  #         tags: latest
  #
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   env:
  #     CI: true
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - uses: benjlevesque/short-sha@v1.2
  #       id: short-sha
  #       with:
  #         length: 7
  #     - name: create env
  #       run: |
  #             echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
  #             echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
  #             echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
  #             echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
  #             echo "CORS_ORIGIN_WHITELIST=${{ secrets.CORS_ORIGIN_WHITELIST }}" >> .env
  #             echo "CELERY_BACKEND=db+postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres/${{ secrets.POSTGRES_DB }}" >> .env
  #             echo "IMAGE=docker.pkg.github.com/${{ github.repository }}/${{ secrets.IMAGE_NAME }}:sha-${{ steps.short-sha.outputs.sha }}" >> .env
  #             echo "FRONT_IMAGE=docker.pkg.github.com/${{ github.repository }}/${{ secrets.FRONT_IMAGE_NAME }}:latest" >> .env
  #             echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
  #             echo "SENTRY_ENVIRONMENT=${{ secrets.SENTRY_ENVIRONMENT }}" >> .env
  #     - name: Copy .env
  #       uses: garygrossgarten/github-action-scp@release
  #       with:
  #         local: .env
  #         remote: ./git/.env
  #         rmRemote: true
  #         recursive: false
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.SSH_USER }}
  #         privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
  #     - name: Copy docker-compose.deploy.yaml
  #       uses: garygrossgarten/github-action-scp@release
  #       with:
  #         local: ./docker-compose.deploy.yaml
  #         remote: ./git/docker-compose.deploy.yaml
  #         rmRemote: true
  #         recursive: false
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.SSH_USER }}
  #         privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
  #     - name: Deploy docker-compose
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.SSH_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #             cd git
  #             docker login -u ${{ secrets.R_USER }} -p ${{ secrets.R_SECRET }}  docker.pkg.github.com/${{ github.repository }}/
  #             docker-compose -f docker-compose.deploy.yaml pull celery_worker celery_beat app front &&
  #             docker-compose -f docker-compose.deploy.yaml stop celery_worker celery_beat app front &&
  #             docker-compose -f docker-compose.deploy.yaml up -d celery_worker celery_beat front app
